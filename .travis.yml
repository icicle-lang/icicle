# Minimal builder
# This one differs from the haskell-ci one in that it
# doesn't sdist at the start, and doesn't run tests for
# all submodules.
language: c
dist: xenial
git:
  # whether to recursively clone submodules
  submodules: true
cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store
    - $HOME/.hlint
before_cache:
  - rm -fv $CABALHOME/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $CABALHOME/packages/hackage.haskell.org/00-index.*
  - rm -fv $CABALHOME/packages/hackage.haskell.org/*.json
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.cache
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar.idx
  - rm -rfv $CABALHOME/packages/head.hackage
matrix:
  include:
    - compiler: ghc-8.8.1
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.8.1","cabal-install-3.0"]}}
    - compiler: ghc-8.6.5
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.6.5","cabal-install-3.0"]}}
    - compiler: ghc-8.4.4
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.4.4","cabal-install-3.0"]}}
    - compiler: ghc-8.2.2
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.2.2","cabal-install-3.0"]}}
    - compiler: ghc-8.0.2
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.0.2","cabal-install-3.0"]}}
before_install:
  - HC=$(echo "/opt/$CC/bin/ghc" | sed 's/-/\//')
  - WITHCOMPILER="-w $HC"
  - HADDOCK=$(echo "/opt/$CC/bin/haddock" | sed 's/-/\//')
  - HCPKG="$HC-pkg"
  - unset CC
  - CABAL=/opt/ghc/bin/cabal
  - CABALHOME=$HOME/.cabal
  - export PATH="$CABALHOME/bin:$PATH"
  - TOP=$(pwd)
  - "HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\\d+)\\.(\\d+)\\.(\\d+)(\\.(\\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')"
  - echo $HCNUMVER
  - CABAL="$CABAL -vnormal+nowrap+markoutput"
  - set -o pipefail
  - |
    echo 'function blue(s) { printf "\033[0;34m" s "\033[0m " }'           >> .colorful.awk
    echo 'BEGIN { state = "output"; }'                                     >> .colorful.awk
    echo '/^-----BEGIN CABAL OUTPUT-----$/ { state = "cabal" }'            >> .colorful.awk
    echo '/^-----END CABAL OUTPUT-----$/ { state = "output" }'             >> .colorful.awk
    echo '!/^(-----BEGIN CABAL OUTPUT-----|-----END CABAL OUTPUT-----)/ {' >> .colorful.awk
    echo '  if (state == "cabal") {'                                       >> .colorful.awk
    echo '    print blue($0)'                                              >> .colorful.awk
    echo '  } else {'                                                      >> .colorful.awk
    echo '    print $0'                                                    >> .colorful.awk
    echo '  }'                                                             >> .colorful.awk
    echo '}'                                                               >> .colorful.awk
  - cat .colorful.awk
  - |
    color_cabal_output () {
      awk -f $TOP/.colorful.awk
    }
  - echo text | color_cabal_output
install:
  - ${CABAL} --version
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - TEST=--enable-tests
  - BENCH=--enable-benchmarks
  - HEADHACKAGE=false
  - rm -f $CABALHOME/config
  - |
    echo "verbose: normal +nowrap +markoutput"                                  >> $CABALHOME/config
    echo "remote-build-reporting: anonymous"                                    >> $CABALHOME/config
    echo "write-ghc-environment-files: always"                                  >> $CABALHOME/config
    echo "remote-repo-cache: $CABALHOME/packages"                               >> $CABALHOME/config
    echo "logs-dir:          $CABALHOME/logs"                                   >> $CABALHOME/config
    echo "world-file:        $CABALHOME/world"                                  >> $CABALHOME/config
    echo "extra-prog-path:   $CABALHOME/bin"                                    >> $CABALHOME/config
    echo "symlink-bindir:    $CABALHOME/bin"                                    >> $CABALHOME/config
    echo "installdir:        $CABALHOME/bin"                                    >> $CABALHOME/config
    echo "build-summary:     $CABALHOME/logs/build.log"                         >> $CABALHOME/config
    echo "store-dir:         $CABALHOME/store"                                  >> $CABALHOME/config
    echo "install-dirs user"                                                    >> $CABALHOME/config
    echo "  prefix: $CABALHOME"                                                 >> $CABALHOME/config
    echo "repository hackage.haskell.org"                                       >> $CABALHOME/config
    echo "  url: http://hackage.haskell.org/"                                   >> $CABALHOME/config
    echo "  secure: True"                                                       >> $CABALHOME/config
    echo "  key-threshold: 3"                                                   >> $CABALHOME/config
    echo "  root-keys:"                                                         >> $CABALHOME/config
    echo "    fe331502606802feac15e514d9b9ea83fee8b6ffef71335479a2e68d84adc6b0" >> $CABALHOME/config
    echo "    1ea9ba32c526d1cc91ab5e5bd364ec5e9e8cb67179a471872f6e26f0ae773d42" >> $CABALHOME/config
    echo "    2c6c3627bd6c982990239487f1abd02e08a02e6cf16edb105a8012d444d870c3" >> $CABALHOME/config
    echo "    0a5c7ea47cd1b15f01f5f51a33adda7e655bc0f0b0615baa8e271f4c3351e21d" >> $CABALHOME/config
    echo "    51f0161b906011b52c6613376b1ae937670da69322113a246a09f807c62f6921" >> $CABALHOME/config
  - |
    echo "program-default-options"                >> $CABALHOME/config
    echo "  ghc-options: $GHCJOBS +RTS -M6G -RTS" >> $CABALHOME/config
  - cat $CABALHOME/config
  - travis_retry ${CABAL} v2-update -v

script:
  # Build
  # - ${CABAL} build $WITHCOMPILER --enable-tests --enable-benchmarks --dep -j2 all | color_cabal_output
  # Testing...
  - ${CABAL} test $WITHCOMPILER --enable-tests --enable-benchmarks icicle:test | color_cabal_output
  # Export zebra executable to run.
  # FIXME also run CLI tests.
  # cabal check...
  - (cd icicle-data && ${CABAL} -vnormal check)
  - (cd icicle-core && ${CABAL} -vnormal check)
  - (cd icicle-source && ${CABAL} -vnormal check)
  - (cd icicle-compiler && ${CABAL} -vnormal check)

# REGENDATA ("0.7.20191106",["cabal.project"])
# EOF
