module Prelude where

--------------------------------------------------------------------------------
-- Base
--------------------------------------------------------------------------------


-- mod, relying on rounding.
mod : Int -> Int -> Possibly Int
mod x y =
  x - (trunc (double x / double y) * y)


-- integer division
int_div : Int -> Int -> Possibly Int
int_div x y =
  trunc (double x / double y)


-- Most recent value
newest : Element a -> Aggregate (Possibly a)
newest v =
  latest 1 in fold1 x = v then v in x


-- Oldest seen
oldest : Element a -> Aggregate (Possibly a)
oldest v =
  fold1 s = v then s in s


-- check if a day is a weekend.
is_weekend : Time -> Possibly Bool
is_weekend v =
  let day = mod (days v) 7
   in day == 3 || day == 4


-- starting at epoch 1600/01/03, identify the week that containing this day.
week_of_day : Time -> Possibly Int
week_of_day d
  = trunc (double (days d) / 7)


-- Boolean statements
not : Bool -> Bool
not b = if b then False else True


is_some : Option a -> Bool
is_some o =
  case o of
    Some _ then
      True
    None then
      False


is_none : Option a -> Bool
is_none o =
  case o of
    Some _ then
      False
    None then
      True


get : Option a -> Possibly a
get a =
  case a of
    Some a' then
      a'
    None then
      box (Left ExceptTombstone)


get_or_else : a -> Option a -> a
get_or_else default a =
  case a of
    Some a' then
      a'
    None then
      default


fst : (a, b) -> a
fst xy =
  case xy of
    (x, _) then x


snd : (a, b) -> b
snd xy =
  case xy of
    (_, y) then y


distinct_values : Element a -> Aggregate (Possibly (Array a))
distinct_values k =
  keys (group k in False)


-- Are any elements true
any : Element Bool -> Aggregate Bool
any x = fold a = False then a || x in a


-- Are all elements true
all : Element Bool -> Aggregate Bool
all x = fold a = True then a && x in a


--------------------------------------------------------------------------------
-- Statistics
--------------------------------------------------------------------------------



sum : Num a
   => p =: PossibilityOfNum a
   => Element (Possibility p a)
   -> Aggregate (Possibility p a)
sum v =
  fold s = 0 then
    v + s
  in s


count : Num a
     => Element b
     -> Aggregate a
count v =
  fold c = 0 then
    seq v (c + 1)
  in
    from_integer c


-- Numerically stable mean
mean : Num a => Element a -> Aggregate (Possibly Double)
mean v =
  let
    v =
      double v
  in
    fold1 (m, n) =
      (v, 1) then
        (m + (v - m) / (n + 1), n + 1)
    in m


max : Element a -> Aggregate (Possibly a)
max v =
  fold1 s =
    v then
      if v > s then v else s
  in s


min : Element a -> Aggregate (Possibly a)
min v =
  fold1 s =
    v then
      if v < s then v else s
  in s


min_by : Element a -> Element b -> Aggregate (Possibly b)
min_by a b =
  fold1 (x, y) =
    (a, b) then
      if a < x then
        (a, b)
      else
        (x, y)
  in y


max_by : Element a -> Element b -> Aggregate (Possibly b)
max_by a b =
  fold1 (x, y) =
    (a, b) then
      if a > x then
        (a, b)
      else
        (x, y)
  in y


-- Numerically stable variance
variance : Num a => Element a -> Aggregate (Possibly Double)
variance v =
  let
    v = double v
  in
    fold (n, m, m2) =
      (0, 0, 0) then
        let
          n = n + 1
          d = v - m
          m = m + d / n
          m2 = m2 + d * (v - m)
        in
          (n, m, m2)
    in
      m2 / (n - 1)


sd : Num a => Element a -> Aggregate (Possibly Double)
sd v =
  sqrt (variance v)


-- Numerically stable covariance
covariance : Num a => Element a -> Element a -> Aggregate (Possibly Double)
covariance a b =
  let
    a = double a
    b = double b
  in
    fold (n, m1, m2, m12) =
      (0, 0, 0, 0) then
        let
          n   = n + 1
          d1  = (a - m1) / n
          m1  = m1 + d1
          d2  = (b - m2) / n
          m2  = m2 + d2
          m12 = m12 + n * d1 * d2 - m12 / n
        in
          (n, m1, m2, m12)
    in
      m12 * n / (n - 1)


-- Pearson's product-moment correlation coefficient.
correlation : Num a => Element a -> Element a -> Aggregate (Possibly Double)
correlation a b =
  covariance a b / (sd a * sd b)


-- Gradient with units y/x.
gradient : Num a => Element a -> Element a -> Aggregate (Possibly Double)
gradient a b =
  covariance a b / variance b


-- Count the number of times a state changes.
-- This version uses concrete values, and will
-- emit an error if a tombstone value is used.
numflips : Num n
        => Element a
        -> Aggregate (Possibly n)
numflips v =
  fold1 (s, i) =
    (v, 0) then
      if s == v then
        (v, i)
      else
        (v, i + 1)
  in
    from_integer i


-- Version of num flips which will accommodate
-- tombstone values by having the tombstone
-- function passed to it.
numflips' : Num n
         => Element a
         -> Element Bool
         -> Aggregate (Possibly n)
numflips' v t =
  let
    zero =
      if t then
        (None, 0)
      else
        (Some v, 0)

    kons s i =
      if t then
        case s of
          Some _ then
            (None, i + 1)
          None then
            (None, i)
      else
        if (s == Some v) then
          (Some v, i)
        else
          (Some v, i + 1)

  in
    fold1 (s, i) =
      zero then kons s i
    in
      from_integer i



--------------------------------------------------------------------------------
-- Circular Statistics
--------------------------------------------------------------------------------


pi : Double
pi = 3.141592653589793


circular_stats : Element Double -> Aggregate (Possibly (Double, Double, Double))
circular_stats theta =
  fold
    (x_loc, y_loc, n) =
      (0, 0, 0) then
        let
          n      = n + 1
          x_diff = cos theta
          y_diff = sin theta

          x_new  = x_loc + (x_diff - x_loc) / n
          y_new  = y_loc + (y_diff - y_loc) / n
        in
          (x_new, y_new, n)
  in
    let
      mean   = atan2 y_loc x_loc
      radius = sqrt (x_loc * x_loc + y_loc * y_loc)
      sd     = 1 - radius
      z_test = n * radius * radius
    in
      (mean, sd, z_test)


--------------------------------------------------------------------------------
-- Time and Date Statistics
--------------------------------------------------------------------------------


-- Count the days that an entity has spent in different states.
-- e.g. days-in state time now = [("NSW", 20), ("QLD", 1)]
days_in : Element a -> Element Time -> Aggregate Time -> Aggregate (Possibly (Group a Int))
days_in x tx now =
    fold (s, nv, m) =
      (None, 0, map_create) then
        case s of
          None then
            (Some (x, tx), 1, m)

          Some (v, tv) then
            let
              nx = days_between tv tx
              n  = nv + nx
            in
              if v == x then
                (Some (x, tx), nv + nx, m)
              else
                let
                  m' =
                    case (map_lookup v m) of
                      None then
                        map_insert v n m
                      Some nv' then
                        map_insert v (n + nv') m
                in
                  (Some (x, tx), 0, m')
  in
    let
      x_new   = newest x
      tx_new  = newest tx
      tx_days = days_between tx_new now
  in
    case (map_lookup x_new m) of
      None then
        map_insert x_new tx_days m
      Some n then
        map_insert x_new (tx_days + n) m

