:set +type
from salary ~> fold perhaps = Left 0 then case perhaps of Left i then Right (double i+1);  Right j then Left (trunc j+1) ~> perhaps
from salary ~> fold perhaps = Left 0 then case perhaps of Right i then Left (trunc i+1) ;  Left j then Right (double j+1) ~> perhaps


from salary ~> fold perhaps = Left 0 then case perhaps of Left i then Right i; Right j then Left j ~> perhaps
from salary ~> fold perhaps = Left 0 then case perhaps of Right i then Left i; Left j then Right j ~> perhaps

-- Cases can be strange
from salary ~> windowed 1 days ~> case None of Some a then Some a; None then Some 0

-- Nested case with a polymorphic scrutinee (Num a => (Bool,a))
from salary ~> let v = (True,1) ~> fold s2 = False then case (case v of (a,b) then a) of True then False; False then True ~> s2

-- Case matching on literals
from salary ~> latest 10 ~> case value of 10 then "ten"; 100 then "One hundred"; 1000 then "One thousand"; _ then "Not a power of 10"
from injury ~> latest 10 ~> case (Some location) of Some "head" then "head"; _ then "Not the head"
